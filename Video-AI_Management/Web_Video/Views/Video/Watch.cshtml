@model Web_Video.ViewModels.Video.VideoWatchViewModel
@using Web_Video.Extensions
@{
    ViewData["CurrentPage"] = "Watch";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Container cho video */
    .video-container {
        position: relative;
        width: 100%;
        padding-top: 56.25%;
    }

    video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 10px;
        box-shadow: none;
        outline: none;
        object-fit: cover;
    }

    .video-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #000;
        margin: 10px 0;
    }

    .channel-info {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }

        .channel-info .channel-name {
            font-size: 0.9rem;
            font-weight: 500;
            color: #000;
        }

        .channel-info .subscribers {
            font-size: 0.85rem;
            color: #606060;
            margin-top: 2px;
        }

    .subscribe-btn {
        background-color: #c00;
        color: #fff;
        border: none;
        padding: 8px 16px;
        font-size: 0.9rem;
        font-weight: 500;
        border-radius: 2px;
        transition: background-color 0.2s;
    }

        .subscribe-btn.subscribed {
            background-color: #ccc;
            color: #000;
        }

    .action-buttons {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .action-buttons .btn {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.9rem;
            color: #606060;
            border: none;
            background: none;
            padding: 5px 10px;
            border-radius: 2px;
            transition: color 0.2s;
        }

            .action-buttons .btn.active {
                color: #000;
            }

            .action-buttons .btn i {
                font-size: 1rem;
            }

    .description-box {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        margin-top: 15px;
    }

        .description-box p {
            font-size: 0.9rem;
            color: #333;
            margin: 0;
        }

    .comments-section {
        margin-top: 20px;
    }

    .recommended-video {
        display: flex;
        margin-bottom: 15px;
    }

        .recommended-video img {
            width: 168px;
            height: 94px;
            object-fit: cover;
            border-radius: 5px;
            margin-right: 10px;
        }

        .recommended-video .video-info {
            flex: 1;
        }

            .recommended-video .video-info h6 {
                font-size: 0.9rem;
                font-weight: 500;
                margin: 0;
                line-height: 1.2;
                display: -webkit-box;
                -webkit-line-clamp: 2;
                -webkit-box-orient: vertical;
                overflow: hidden;
                color: #000;
            }

            .recommended-video .video-info p {
                font-size: 0.85rem;
                color: #606060;
                margin: 4px 0 0 0;
            }

    .recommended-videos {
        margin-top: 0;
    }

    .tag-container {
        margin-top: 10px;
    }

    .tag {
        display: inline-block;
        background-color: #e0e0e0;
        color: #333;
        padding: 5px 10px;
        margin: 5px 5px 0 0;
        border-radius: 15px;
        font-size: 0.85rem;
    }
</style>

<div class="row mt-3">
    <div class="col-lg-8 mb-2">
        <div class="video-container">
            <video controls>
                <source src="/Video/GetVideoFile?videoId=@Model.Id" type="@Model.VideoContentType" />
                Trình duyệt của bạn không hỗ trợ thẻ video.
            </video>
        </div>

        <h1 class="video-title">@Model.Title</h1>

        <div class="channel-info">
            <div>
                <a asp-action="Channel" asp-controller="Member" asp-route-id="@Model.ChannelId" class="text-decoration-none channel-name">@Model.ChannelName</a>
                <p class="subscribers">@SD.FormatView(Model.SubscribersCount) người đăng ký</p>
            </div>
            @if (User.GetUserChannelId() != Model.ChannelId.ToString())
            {
                <button id="subscribeBtn" class="subscribe-btn @(Model.IsSubscribed ? "subscribed" : "")">
                    @(Model.IsSubscribed ? "Đã đăng ký" : "Đăng ký")
                </button>
            }
        </div>

        <div class="action-buttons">
            <button class="btn @(Model.IsLiked ? "active" : "")" id="likeBtn" onclick="likeDislike('likeBtn', 'like')">
                <i class="bi bi-hand-thumbs-up-fill"></i> <span>@SD.FormatView(Model.LikesCount)</span>
            </button>
            <button class="btn @(Model.IsDisiked ? "active" : "")" id="dislikeBtn" onclick="likeDislike('dislikeBtn', 'dislike')">
                <i class="bi bi-hand-thumbs-down-fill"></i> <span>@SD.FormatView(Model.DislikesCount)</span>
            </button>
            <button class="btn">
                <i class="bi bi-share-fill"></i> Chia sẻ
            </button>
            <form method="post">
                <button asp-action="DownloadVideoFile" asp-route-videoId="@Model.Id" type="submit" class="btn">Tải xuống</button>
            </form>
        </div>

        <div class="description-box">
            <p><strong>@SD.FormatView(Model.ViewersCount) lượt xem • @SD.TimeAgo(Model.CreatedAt)</strong></p>
            @if (!string.IsNullOrEmpty(Model.RecognizedCelebrities))
            {
                <div class="tag-container">
                    @{
                        var celebrities = Model.RecognizedCelebrities
                        .Replace("Đã nhận diện: ", "")
                        .Split(new[] { ", " }, StringSplitOptions.RemoveEmptyEntries);
                    }
                    @foreach (var celebrity in celebrities)
                    {
                        <span class="tag">@celebrity</span>
                    }
                </div>
            }
            <p>@Model.Description</p>
        </div>

        <div class="comments-section">
            <partial name="_CommentPartial" model="Model.CommentVM" />
        </div>
    </div>

    <div class="col-lg-4">
        <div class="recommended-videos">
            @foreach (var video in Model.RecommendedVideos)
            {
                <div class="recommended-video">
                    <a asp-action="Watch" asp-controller="Video" asp-route-id="@video.Id">
                        <img src="@video.Thumbnail" alt="@video.Title" />
                    </a>
                    <div class="video-info">
                        <a asp-action="Watch" asp-controller="Video" asp-route-id="@video.Id" class="text-decoration-none text-dark">
                            <h6>@video.Title</h6>
                        </a>
                        <p>@video.ChannelName • @SD.FormatView(video.ViewersCount) lượt xem • @SD.TimeAgo(video.CreatedAt)</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function timeAgo(date) {
            const now = new Date();
            const posted = new Date(date);
            const diffInSeconds = Math.floor((now - posted) / 1000);

            if (diffInSeconds < 60) return "vừa xong";
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} phút trước`;
            if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} giờ trước`;
            return `${Math.floor(diffInSeconds / 86400)} ngày trước`;
        }

        $('#subscribeBtn').on('click', function () {
            $.ajax({
                url: "/Video/SubscribeChannel",
                type: "PUT",
                data: { channelId: '@Model.ChannelId' },
                success: function (data) {
                    if (data.title == "Unsubscribed") {
                        $('#subscribeBtn').removeClass('subscribed');
                        $('#subscribeBtn').text('Đăng ký');
                        displayNotification(false, data.title, data.message, 'toastr');
                    } else if (data.title == "Subscribed") {
                        $('#subscribeBtn').addClass('subscribed');
                        $('#subscribeBtn').text('Đã đăng ký');
                        displayNotification(true, data.title, data.message, 'toastr');
                    } else {
                        displayNotification(data.isSuccess, data.title, data.message, 'modal');
                    }
                }
            });
        });

        function likeDislike(id, action) {
            let model = {
                videoId: '@Model.Id',
                action
            };

            if ($('#' + id).hasClass('active')) {
                model.like = false;
            } else {
                model.like = true;
            }

            $.ajax({
                url: "/Video/LikeDislikeVideo",
                type: "PUT",
                data: model,
                success: function (data) {
                    const commands = data.title.split('-');
                    commands.map(c => {
                        if (c == 'addLike') {
                            $('#likeBtn').addClass('active');
                            var $span = $('#likeBtn').find('span');
                            var currentNumber = parseInt($span.text());
                            $span.text(currentNumber + 1);
                        } else if (c == 'addDislike') {
                            $('#dislikeBtn').addClass('active');
                            var $span = $('#dislikeBtn').find('span');
                            var currentNumber = parseInt($span.text());
                            $span.text(currentNumber + 1);
                        } else if (c == 'removeLike') {
                            $('#likeBtn').removeClass('active');
                            var $span = $('#likeBtn').find('span');
                            var currentNumber = parseInt($span.text());
                            $span.text(currentNumber - 1);
                        } else if (c == 'removeDislike') {
                            $('#dislikeBtn').removeClass('active');
                            var $span = $('#dislikeBtn').find('span');
                            var currentNumber = parseInt($span.text());
                            $span.text(currentNumber - 1);
                        }
                    });
                }
            });
        }

        $('#textComment').on('input', function () {
            var text = $(this).val().trim();
            if (text.length > 0) {
                $('#sectionCommentBtns').fadeIn();
            } else {
                $('#sectionCommentBtns').fadeOut();
            }
        });

        $('#btnCancel').on('click', function () {
            $('#textComment').val('');
            $('#sectionCommentBtns').fadeOut();
        });

        // Xử lý form tạo bình luận
        document.getElementById('create-comment-form').addEventListener('submit', function (event) {
            event.preventDefault();

            const content = document.getElementById('textComment').value.trim();
            const videoId = document.querySelector('input[name="PostComment.VideoId"]').value;
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const data = {
                PostComment: {
                    VideoId: videoId,
                    Content: content
                },
                __RequestVerificationToken: token
            };

            $.ajax({
                url: '/Video/CreateComment',
                type: 'POST',
                data: data,
                success: function (data) {
                    if (data.isSuccess) {
                        const newComment = data.comment;
                        const isOwner = newComment.appUserId === '@User.GetUserId()';
                        const commentHtml = `
                            <div class="comment-item" id="comment-${newComment.id}">
                                <img src="/avatarUser/avt-default.jpg" alt="User Avatar" />
                                <div class="comment-content">
                                    <div class="comment-header">
                                        <span class="comment-author">${newComment.fromName}</span>
                                        <span class="comment-time">${timeAgo(newComment.postedAt)}</span>
                                    </div>
                                    <p class="comment-text">${newComment.content}</p>
                                    ${isOwner ? `
                                        <div class="comment-actions-wrapper">
                                            <button class="btn btn-more-actions" data-comment-id="${newComment.id}">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <div class="comment-actions-menu" id="actions-menu-${newComment.id}" style="display: none;">
                                                <button class="btn btn-edit-comment" data-comment-id="${newComment.id}">Sửa</button>
                                                <button class="btn btn-delete-comment" data-comment-id="${newComment.id}" data-video-id="${videoId}">Xóa</button>
                                            </div>
                                        </div>
                                        <form class="edit-comment-form" id="edit-form-${newComment.id}">
                                            <input type="hidden" name="commentId" value="${newComment.id}" />
                                            <input type="hidden" name="videoId" value="${videoId}" />
                                            <input type="hidden" name="__RequestVerificationToken" value="${token}" />
                                            <textarea name="content" class="form-control" rows="2">${newComment.content}</textarea>
                                            <div class="edit-actions">
                                                <button type="button" class="btn btn-cancel btn-cancel-edit" data-comment-id="${newComment.id}">Hủy</button>
                                                <button type="submit" class="btn btn-save">Lưu</button>
                                            </div>
                                        </form>
                                    ` : ''}
                                </div>
                            </div>
                        `;

                        const commentsList = document.getElementById('comments-list');
                        commentsList.insertAdjacentHTML('afterbegin', commentHtml);

                        const commentCount = document.querySelectorAll('.comment-item').length;
                        document.querySelector('.comments-header').textContent = `${commentCount} ${commentCount > 1 ? 'Bình luận' : 'Bình luận'}`;

                        $('#textComment').val('');
                        $('#sectionCommentBtns').fadeOut();

                        displayNotification(true, data.title, data.message, 'toastr');
                    } else {
                        displayNotification(false, data.title, data.message, 'toastr');
                    }
                },
                error: function (xhr) {
                    displayNotification(false, 'Lỗi', `Đã xảy ra lỗi khi thêm bình luận: ${xhr.statusText}`, 'toastr');
                }
            });
        });

        document.addEventListener('click', function (event) {
            if (event.target.closest('.btn-more-actions')) {
                const button = event.target.closest('.btn-more-actions');
                const commentId = button.getAttribute('data-comment-id');
                const menu = document.getElementById(`actions-menu-${commentId}`);

                document.querySelectorAll('.comment-actions-menu').forEach(m => {
                    if (m !== menu) {
                        m.style.display = 'none';
                    }
                });

                menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
            }

            if (!event.target.closest('.btn-more-actions') && !event.target.closest('.comment-actions-menu')) {
                document.querySelectorAll('.comment-actions-menu').forEach(menu => {
                    menu.style.display = 'none';
                });
            }

            if (event.target.classList.contains('btn-edit-comment')) {
                event.preventDefault();
                const commentId = event.target.getAttribute('data-comment-id');
                const commentText = document.querySelector(`#comment-${commentId} .comment-text`);
                const editForm = document.querySelector(`#comment-${commentId} .edit-comment-form`);

                if (commentText && editForm) {
                    commentText.style.display = 'none';
                    editForm.style.display = 'block';
                    document.getElementById(`actions-menu-${commentId}`).style.display = 'none';
                } else {
                    console.error('Không tìm thấy phần tử cho commentId:', commentId);
                }
            }

            if (event.target.classList.contains('btn-cancel-edit')) {
                const commentId = event.target.getAttribute('data-comment-id');
                const commentText = document.querySelector(`#comment-${commentId} .comment-text`);
                const editForm = document.querySelector(`#comment-${commentId} .edit-comment-form`);

                if (commentText && editForm) {
                    commentText.style.display = 'block';
                    editForm.style.display = 'none';
                }
            }

            if (event.target.classList.contains('btn-delete-comment')) {
                if (!confirm('Bạn có chắc muốn xóa bình luận này không?')) {
                    return;
                }

                const commentId = event.target.getAttribute('data-comment-id');
                const videoId = event.target.getAttribute('data-video-id');

                $.ajax({
                    url: '/Video/DeleteComment',
                    type: 'POST',
                    data: { commentId: commentId, videoId: videoId, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                    success: function (data) {
                        if (data.isSuccess) {
                            document.getElementById(`comment-${commentId}`).remove();
                            const commentCount = document.querySelectorAll('.comment-item').length;
                            document.querySelector('.comments-header').textContent = `${commentCount} ${commentCount > 1 ? 'Bình luận' : 'Bình luận'}`;
                            displayNotification(true, data.title, data.message, 'toastr');
                        } else {
                            displayNotification(false, data.title, data.message, 'toastr');
                        }
                    },
                    error: function () {
                        displayNotification(false, 'Lỗi', 'Đã xảy ra lỗi khi xóa bình luận', 'toastr');
                    }
                });
            }
        });

        document.querySelectorAll('.edit-comment-form').forEach(form => {
            form.addEventListener('submit', function (event) {
                event.preventDefault();

                const commentId = form.querySelector('input[name="commentId"]').value;
                const videoId = form.querySelector('input[name="videoId"]').value;
                const content = form.querySelector('textarea[name="content"]').value.trim();
                const token = form.querySelector('input[name="__RequestVerificationToken"]').value;

                const data = {
                    commentId: commentId,
                    videoId: videoId,
                    content: content,
                    __RequestVerificationToken: token
                };

                $.ajax({
                    url: '/Video/EditComment',
                    type: 'POST',
                    data: data,
                    success: function (data) {
                        if (data.isSuccess) {
                            const commentText = document.querySelector(`#comment-${commentId} .comment-text`);
                            commentText.textContent = content;
                            commentText.style.display = 'block';

                            form.style.display = 'none';

                            const commentTime = document.querySelector(`#comment-${commentId} .comment-time`);
                            if (!commentTime.querySelector('.edited-label')) {
                                const editedLabel = document.createElement('span');
                                editedLabel.className = 'edited-label';
                                editedLabel.textContent = '(đã chỉnh sửa)';
                                commentTime.appendChild(editedLabel);
                            }

                            displayNotification(true, data.title, data.message, 'toastr');
                        } else {
                            displayNotification(false, data.title, data.message, 'toastr');
                        }
                    },
                    error: function (xhr) {
                        displayNotification(false, 'Lỗi', `Đã xảy ra lỗi khi cập nhật bình luận: ${xhr.statusText}`, 'toastr');
                    }
                });
            });
        });
    </script>
}