@model Web_Video.ViewModels.Video.VideoWatchViewModel
@using Web_Video.Extensions

<style>
    /* Container cho video */
    .video-container {
        position: relative;
        width: 100%;
        padding-top: 56.25%; /* Tỷ lệ 16:9 (9/16 = 0.5625) */
        background-color: #000; /* Đặt nền đen để giống YouTube */
    }

    /* Định dạng video */
    video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 0; /* Bỏ border-radius để giống YouTube */
        box-shadow: none; /* Bỏ box-shadow để giống YouTube */
        outline: none;
        object-fit: cover; /* Đảm bảo video lấp đầy khung mà không bị méo */
    }

    /* Định dạng tiêu đề video */
    .video-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #000;
        margin: 10px 0;
    }

    /* Định dạng thông tin kênh */
    .channel-info {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .channel-info .channel-name {
        font-size: 0.9rem;
        font-weight: 500;
        color: #000;
    }

    .channel-info .subscribers {
        font-size: 0.85rem;
        color: #606060;
        margin-top: 2px;
    }

    /* Nút Subscribe */
    .subscribe-btn {
        background-color: #c00; /* Màu đỏ của YouTube */
        color: #fff;
        border: none;
        padding: 8px 16px;
        font-size: 0.9rem;
        font-weight: 500;
        border-radius: 2px;
        transition: background-color 0.2s;
    }

    .subscribe-btn.subscribed {
        background-color: #ccc; /* Màu xám khi đã subscribe */
        color: #000;
    }

    /* Nút tương tác (Like, Dislike, Share) */
    .action-buttons {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .action-buttons .btn {
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 0.9rem;
        color: #606060;
        border: none;
        background: none;
        padding: 5px 10px;
        border-radius: 2px;
        transition: color 0.2s;
    }

    .action-buttons .btn.active {
        color: #000;
    }

    .action-buttons .btn i {
        font-size: 1rem;
    }

    /* Mô tả video */
    .description-box {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        margin-top: 15px;
    }

    .description-box p {
        font-size: 0.9rem;
        color: #333;
        margin: 0;
    }

    /* Phần bình luận */
    .comments-section {
        margin-top: 20px;
    }

    .comments-section h5 {
        font-size: 1rem;
        font-weight: 500;
        color: #000;
        margin-bottom: 15px;
    }

    .comment-input {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .comment-input img {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    .comment-input input {
        flex: 1;
        border: none;
        border-bottom: 1px solid #ccc;
        padding: 5px 0;
        font-size: 0.9rem;
        outline: none;
    }

    /* CSS cho video đề xuất */
    .recommended-video {
        display: flex;
        margin-bottom: 15px;
    }

    .recommended-video img {
        width: 168px;
        height: 94px; /* Tỷ lệ 16:9 */
        object-fit: cover;
        border-radius: 0; /* Bỏ border-radius để giống YouTube */
        margin-right: 10px;
    }

    .recommended-video .video-info {
        flex: 1;
    }

    .recommended-video .video-info h6 {
        font-size: 0.9rem;
        font-weight: 500;
        margin: 0;
        line-height: 1.2;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        color: #000;
    }

    .recommended-video .video-info p {
        font-size: 0.85rem;
        color: #606060;
        margin: 4px 0 0 0;
    }

    .recommended-videos {
        margin-top: 0;
    }

    /* CSS cho tag */
    .tag-container {
        margin-top: 10px;
    }

    .tag {
        display: inline-block;
        background-color: #e0e0e0;
        color: #333;
        padding: 5px 10px;
        margin: 5px 5px 0 0;
        border-radius: 15px;
        font-size: 0.85rem;
    }
</style>

<div class="row mt-3">
    <div class="col-lg-8 mb-2">
        <!-- Khung video chính -->
        <div class="video-container">
            <video controls>
                <source src="/Video/GetVideoFile?videoId=@Model.Id" type="@Model.VideoContentType" />
                Your browser does not support the video tag.
            </video>
        </div>

        <!-- Tiêu đề video -->
        <h1 class="video-title">@Model.Title</h1>

        <!-- Thông tin kênh và nút Subscribe -->
        <div class="channel-info">
            <div>
                <a asp-action="Channel" asp-controller="Member" asp-route-id="@Model.ChannelId" class="text-decoration-none channel-name">@Model.ChannelName</a>
                <p class="subscribers">@SD.FormatView(Model.SubscribersCount) subscribers</p>
            </div>
            @if (User.GetUserChannelId() != Model.ChannelId.ToString())
            {
                <button id="subscribeBtn" class="subscribe-btn @(Model.IsSubscribed ? "subscribed" : "")">
                    @(Model.IsSubscribed ? "Subscribed" : "Subscribe")
                </button>
            }
        </div>

        <!-- Nút tương tác -->
        <div class="action-buttons">
            <button class="btn @(Model.IsLiked ? "active" : "")" id="likeBtn" onclick="likeDislike('likeBtn', 'like')">
                <i class="bi bi-hand-thumbs-up-fill"></i> <span>@SD.FormatView(Model.LikesCount)</span>
            </button>
            <button class="btn @(Model.IsDisiked ? "active" : "")" id="dislikeBtn" onclick="likeDislike('dislikeBtn', 'dislike')">
                <i class="bi bi-hand-thumbs-down-fill"></i> <span>@SD.FormatView(Model.DislikesCount)</span>
            </button>
            <button class="btn">
                <i class="bi bi-share-fill"></i> Share
            </button>
            <form method="post">
                <button asp-action="DownloadVideoFile" asp-route-videoId="@Model.Id" type="submit" class="btn">Download</button>
            </form>
        </div>

        <!-- Mô tả video -->
        <div class="description-box">
            <p><strong>@SD.FormatView(Model.ViewersCount) views • @SD.TimeAgo(Model.CreatedAt)</strong></p>
            @if (!string.IsNullOrEmpty(Model.RecognizedCelebrities))
            {
                <div class="tag-container">
                    @{
                        var celebrities = Model.RecognizedCelebrities
                            .Replace("Đã nhận diện: ", "")
                            .Split(new[] { ", " }, StringSplitOptions.RemoveEmptyEntries);
                    }
                    @foreach (var celebrity in celebrities)
                    {
                        <span class="tag">@celebrity</span>
                    }
                </div>
            }
            <p>@Model.Description</p>
        </div>

        <!-- Phần bình luận -->
        <div class="comments-section">
            @* <h5>@(Model.CommentVM.AvailableComments?.Count() ?? 0) Comments</h5> *@
            @await Html.PartialAsync("_CommentPartial", Model.CommentVM)            
        </div>
    </div>
   

    <!-- Cột bên phải: Video đề xuất -->
    <div class="col-lg-4">
        <div class="recommended-videos">
            @foreach (var video in Model.RecommendedVideos)
            {
                <div class="recommended-video">
                    <a asp-action="Watch" asp-controller="Video" asp-route-id="@video.Id">
                        <img src="@video.Thumbnail" alt="@video.Title" />
                    </a>
                    <div class="video-info">
                        <a asp-action="Watch" asp-controller="Video" asp-route-id="@video.Id" class="text-decoration-none text-dark">
                            <h6>@video.Title</h6>
                        </a>
                        <p>@video.ChannelName • @SD.FormatView(video.ViewersCount) views • @SD.TimeAgo(video.CreatedAt)</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {
    <script>
        $('#subscribeBtn').on('click', function () {
            $.ajax({
                url: "/Video/SubscribeChannel",
                type: "PUT",
                data: { channelId: '@Model.ChannelId' },
                success: function (data) {
                    if (data.title == "Unsubscribed") {
                        $('#subscribeBtn').removeClass('subscribed');
                        $('#subscribeBtn').text('Subscribe');
                        displayNotification(false, data.title, data.message, 'toastr');
                    } else if (data.title == "Subscribed") {
                        $('#subscribeBtn').addClass('subscribed');
                        $('#subscribeBtn').text('Subscribed');
                        displayNotification(true, data.title, data.message, 'toastr');
                    } else {
                        displayNotification(data.isSuccess, data.title, data.message, 'modal');
                    }
                }
            })
        });

        function likeDislike(id, action) {
            let model = {
                videoId: '@Model.Id',
                action
            };

            if ($('#' + id).hasClass('active')) {
                model.like = false;
            } else {
                model.like = true;
            }

            $.ajax({
                url: "/Video/LikeDislikeVideo",
                type: "PUT",
                data: model,
                success: function (data) {
                    const commands = data.title.split('-');
                    commands.map(c => {
                        if (c == 'addLike') {
                            $('#likeBtn').addClass('active');
                            var $span = $('#likeBtn').find('span');
                            var currentNumber = parseInt($span.text());
                            $span.text(currentNumber + 1);
                        } else if (c == 'addDislike') {
                            $('#dislikeBtn').addClass('active');
                            var $span = $('#dislikeBtn').find('span');
                            var currentNumber = parseInt($span.text());
                            $span.text(currentNumber + 1);
                        } else if (c == 'removeLike') {
                            $('#likeBtn').removeClass('active');
                            var $span = $('#likeBtn').find('span');
                            var currentNumber = parseInt($span.text());
                            $span.text(currentNumber - 1);
                        } else if (c == 'removeDislike') {
                            $('#dislikeBtn').removeClass('active');
                            var $span = $('#dislikeBtn').find('span');
                            var currentNumber = parseInt($span.text());
                            $span.text(currentNumber - 1);
                        }
                    });
                }
            });
        }

        $('#textComment').on('input', function () {
            var text = $(this).val().trim();
            if (text.length > 0) {
                $('#sectionCommentBtns').fadeIn();
            } else {
                $('#sectionCommentBtns').fadeOut();
            }
        });

        $('#btnCancel').on('click', function () {
            $('#textComment').val('');
            $('#sectionCommentBtns').fadeOut();
        });
    </script>
}